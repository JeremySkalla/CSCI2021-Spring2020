                           _________________

                            HW 06 QUESTIONS
                           _________________


- Name: Jeremy Skalla
- X.500: skall034

Write your answers to the questions below directly in this text file.
Submit the whole text file while taking the associated quiz.


PROBLEM 1: ipow Assembly
========================

  The code pack contains the following files.
  - ipow_for.c : ipow function using a for loop
  - ipow_while.c : ipow function using a while loop
  - ipow_main.c : main function to call the above
  Both the for and while versions define the same function which has a
  meaning which should be obvious.

  Compile and run these as programs using either of the below:
  ,----
  | > gcc ipow_main.c ipow_for.c
  | > ./a.out 3 5
  | 3^5 = 243
  |
  | OR
  |
  | > gcc ipow_main.c ipow_while.c
  | > ./a.out 3 5
  | 3^5 = 243
  `----


A
~

  Compile ipow_for.c to assembly code. Look up how to do this with gcc
  if you did not take notes on how to do so from lecture. Make sure to
  disable optimizations by gcc when compiling.

  Paste the command you used and the generated assembly for the
  resulting ipow_for.s as you answer below.

  gcc -Og -S ipow_for.c

  .file	"ipow_for.c"
  .text
  .globl	ipow
  .type	ipow, @function
ipow:
.LFB0:
  .cfi_startproc
  movl	$0, %edx
  movl	$1, %eax
  jmp	.L2
.L3:
  imull	%edi, %eax
  addl	$1, %edx
.L2:
  cmpl	%esi, %edx
  jl	.L3
  rep ret
  .cfi_endproc
.LFE0:
  .size	ipow, .-ipow
  .ident	"GCC: (Ubuntu 7.4.0-1ubuntu1~18.04.1) 7.4.0"
  .section	.note.GNU-stack,"",@progbits


B
~

  Similarly, compile the file ipow_while.c to assembly and compare the
  resulting ipow_while.s to ipow_for.s.
  - If you see differences, describe what these differences are and why
    the generated code varies between the two.
  - If you see similar code, describe why this might be.

  Setup at the top is similar, obviously with the name changed.
  The rest of the code is the exact same. This makes sense because for and while are both loop functions
  and you can make a for loop in a while loop essentially

C
~

  Examine the generated assembly code in ipow_for.s carefully. Based on
  the "assignments" of initial values to registers and the use of
  registers in operations like multiplication, addition, and comparison,
  attempt to draw a correspondence between the assembly registers and C
  variables. Ensure you identify the C variables
  - argument base: which register contains the 1st function argument?
  - argument exp: which register contains the 2nd function argument?
  - local pow which is also the return value
  - local i

  For your answer, paste in an annotated copy of the ipow_for.s which
  shows labels the correspondence of registers to C variables and
  describes how most of the assembly lines correspond to lines in the C
  code. You may skip lines like
  ,----
  | .cfi_startproc
  | .type	ipow, @function
  | .size	ipow, .-ipow
  | .ident	"GCC: (GNU) 7.3.0"
  | .section	.note.GNU-stack,"",@progbits
  `----
  which are assembler directives beyond the scope of our current
  interest.

  	.file	"ipow_for.c"
	.text
	.globl	ipow
	.type	ipow, @function
ipow:
.LFB0:
	.cfi_startproc
	movl	$0, %edx 	# Arg 3, set %edx to 0
	movl	$1, %eax	# Return value, set %eax to 1
	jmp	.L2 			# Regular Jump
.L3:
	imull	%edi, %eax 	# Signed multiplication of %edi and %eax into %eax (Arg 1 * Return val = Return val)
	addl	$1, %edx 	# Arg 3, add 1 to %edx
.L2:
	cmpl	%esi, %edx	# Compare Arg 2 and Arg 3, until %esi has the same value as %edx
	jl	.L3 			# Conditional Jump
	rep ret				# Ends conditional loop
	.cfi_endproc
.LFE0:
	.size	ipow, .-ipow
	.ident	"GCC: (Ubuntu 7.4.0-1ubuntu1~18.04.1) 7.4.0"
	.section	.note.GNU-stack,"",@progbits


D
~

  One oddity that is likely to appear in the generated assembly code is
  the instruction
  ,----
  | rep ret
  `----
  The `ret' instruction is a function return but `rep' is supposed to
  have a different purpose and the combination is strange.  Investigate
  this by
  - Reading page 208 of Bryant/O'Hallaron which describes this in an
    "aside" , OR
  - Doing a little internet search which should yield similar
    information.
  Describe roughly why `rep ret' shows up here.

  From what I understand, ret is supposed to end the conditional loop.
  Apparently, the branch predictor bugs out if it's directly after a branch instruction or directly jumped to
  rep is normally only meant for repeating the string instruction
  However, the processor ignores it but it also fixes the bug of ret bugging out.
  It seems like they never bothered to fix it and left the bug in there.


PROBLEM 2: Coins Assembly code
==============================

  The code pack contains the following files.

  ------------------------------------------------------------------------
   FILE               Descriptions
  ------------------------------------------------------------------------
   coins_main.c       main function to call the above
   coins_funcs.c      two functions manipulating the `coins_t' structure
   coins_funcs_asm.s  incomplete assembly versions of the above functions
  ------------------------------------------------------------------------

  The purpose of this problem is to complete the assembly code in
  `coins_funcs_asm.s' so that the functions there act identically to the
  C versions.

  Compile the the C version using the below:
  ,----
  | > gcc coins_main.c coins_funcs.c
  | > ./a.out 24
  | 24 cents is...
  | 0 quarters
  | 2 dimes
  | 0 nickels
  | 4 pennies
  | which is 24 cents
  |
  | > ./a.out 63
  | 63 cents is...
  | 2 quarters
  | 1 dimes
  | 0 nickels
  | 3 pennies
  | which is 63 cents
  `----

  Edit coins_funcs_asm.s to complete it and answer the questions below.
  After completing the assembly code, the following will compile and
  produce the same results.
  ,----
  | > gcc coins_main.c coins_funcs_asm.s
  | > ./a.out 24
  | 24 cents is...
  | 0 quarters
  | 2 dimes
  | 0 nickels
  | 4 pennies
  | which is 24 cents
  `----


A
~

  Consider the first block of the assembly function marked BLOCK A.
  Describe what it is doing and how it relates to the C code in
  `coins_funcs.c'. Mention the purpose of the code around the label
  .OOB.

  cmpl compares the constant 99 to %edi, which is the first input.
  jg is a condtional jump that says if %edi is bigger than 99, jump
  jl is a conditional jump that says if %edi is less than 0, jump
  .00B is setting the return value (%eax) to 1 and returning it.
  This is the base case in the c function.


B
~

  BLOCK B performs a division operation. Based on the comments and
  assembly operations, describe what is going on, why the %eax register
  is used, and why the movb instruction is employed.

  %eax register is the return value, and it's going to be overwritten eventually
  and movb is used because the operation is used on an 8 bit object (1 byte)


C
~

  Complete BLOCK C by following the pattern laid out in the preceding
  blocks to calculate the number of nickels and pennies required and set
  the fields of the struct pointer to appropriate values. Consider
  carefully whether two additional divisions are required or if a single
  divide will suffice.


D
~

  In the total_coins() function, study the pattern laid out in the first
  few blocks which extract the 8-bit fields from the packed coins_t
  struct in register rdi. Note the use of shifts with AND operations to
  mask the low order bits to get a single field "alone" in a register
  before doing further operations. Mimic this pattern to complete BLOCK
  D which adds on nickels and pennies to the total.
